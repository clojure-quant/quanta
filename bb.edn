{:paths ["script"]
 :deps {babashka/fs {:mvn/version "0.1.1"}}

 :tasks {:requires
         [webly
          [clojure.edn :as edn]
          [babashka.fs :as fs]]
         ; dev tools
         lint (webly/clojure "app/demo" "-M:lint"
                             "." ; "../goldly-test"
                             ;"src"
                             "../trateg/src"
                             "../warehouse/src"
                             "../data/src"
                             "../tradingview/src"
                             ; demo
                             "../demo/src/demo/algo"
                             "../demo/src/demo/env"
                             ; notebooks
                             "../demo/src/notebook"
                             ;"app/demo/src/notebook/playground"
                             ;"app/demo/src/notebook/studies"
                             ;"app/demo/src/notebook/warehouse"
                             )
         cljfmt-check (webly/clojure "lib/trateg" "-M:cljfmt" "check"
                                     "."
                                     "../../lib/data"
                                     "../../lib/trateg"
                                     "../../lib/helper"
                                     "../../lib/tradingview"
                                     "../../lib/warehouse/src")
         cljfmt-fix (webly/clojure "app/demo" "-M:cljfmt" "fix"
                                   "."
                                   "../../data"
                                   "../demo"
                                   "../../lib")
         deps-tree (webly/clojure "app/demo" "-X:deps" "tree")
         outdated (webly/clojure "app/demo" "-M:outdated")

         clean (do (webly/clean-project "./lib/data")
                   (webly/clean-project "./lib/helper")
                   (webly/clean-project "./lib/tradingview")
                   (webly/clean-project "./lib/trateg")
                   (webly/clean-project "./lib/warehouse")
                   (webly/clean-project "./app/arrow")
                   (webly/clean-project "./app/demo")
                   (webly/clean-project "./app/smile"))

         ; tests
         test-clj {:doc "runs unit tests"
                   :task (do (println "unit test lib/warehouse")
                             (shell {:dir "lib/warehouse"} "clojure" "-M:test")
                             (println "unit test lib/tradingview")
                             (shell {:dir "lib/tradingview"} "clojure" "-M:test")
                             (println "unit test lib/trateg")
                             (shell {:dir "lib/trateg"} "clojure" "-M:test"))}

         performance-test {:doc "runs warehouse performance test"
                           :task (do (println "performance test lib/warehouse")
                                     (shell {:dir "lib/warehouse"}
                                            "clojure" "-X:performance-test"))}

         ;; CI
         ci-check {:depends [cljfmt-check
                             test-clj]
                   :task (shell "echo" "ci checks are ok!")}

         commit-check {:doc "if this succeeds, then the github ci pipeline will work too."
                       :depends [clean
                                 cljfmt-fix
                                 ci-check]
                       :task (shell "echo" "all good - you can push to github")}


         ;; demo

         alphavantage-import {:doc "symbollist. example: bb alphavantage-import test"
                              :task (let [[symbol-list] *command-line-args*]
                                      (println "symbol-list: " symbol-list)
                                      (webly/clojure "app/demo" "-X:run" ":task" ":alphavantage-import" ":symbol" symbol-list))}

         bybit-import {:doc "import bybit data"
                       :task (webly/clojure "app/demo" "-X:run" ":task" ":bybit-import")} ;":symbol" "test"

         warehouse-summary  {:doc "warehouse-summary"
                             :task (webly/clojure "app/demo" "-X:run" ":task" ":warehouse")}

         notebook-eval  {:doc "evaluates notebook collections"
                         :task (webly/clojure "app/demo" "-X:run" ":task" ":nbeval")}

         goldly-docs {:doc "goldly docs ui"
                      :task (webly/clojure "app/demo" "-X:docs")}

         goldly-cert {:doc "Creates ssl certificate for quant.hoertlehner.com"
                      :task (do (shell {:dir "app/demo"} "mkdir" "-p" "certs")
                                (shell {:dir "app/demo"}
                                       "certbot" "certonly"
                                       "-w" "./certs"
                                       "-d" "quant.hoertlehner.com"
                                       "--logs-dir" "/tmp"
                                       "--config-dir" "./certs"
                                       "--work-dir" "./certs"
                                       "--standalone")
                                (shell {:dir "app/demo/certs/live/quant.hoertlehner.com"}
                                       "openssl" "pkcs12"
                                       "-export"
                                       "-CAfile" "chain.pem"
                                       "-caname" "root"
                                       "-in" "fullchain.pem"
                                       "-inkey" "privkey.pem"
                                       "-out" "../../keystore.p12"
                                       "-passout" "pass:password"
                                       "-name" "quant")
                                (shell {:dir "app/demo/certs"}
                                       "chmod" "a+r" "./keystore.p12"))}
         
         gann-tvcharts  {:doc "create gann tradingview-charts"
                         :task (webly/clojure "app/demo" "-X:run" ":task" ":gann")}

         astro  {:doc "calculate aspects"
                 :task (webly/clojure "lib/astro" "-X:astro-test")}



 ;        
         }}