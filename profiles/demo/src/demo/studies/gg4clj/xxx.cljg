;; gorilla-repl.fileformat = 2

;; @@ [meta]
{:tagline ""}

;; @@

;; **
;;; # Pink Gorilla gg4clj demo (ggplot charts via R)
;;;  
;;; pinkgorilla.ui.gg4clj uses R under the hood. So ```R``` and ```Rserv``` needs to be installed on the machine that runs pinkgorilla repl.
;; **

;; @@ [clj]
; kill any running Rserve process
(require '[clojure.java.shell :refer [sh]])
;
;; @@

;; @@ [clj]
; ADD DEPENDENCY
(use '[pinkgorilla.notebook.repl :refer :all])
(pinkgorilla.notebook.repl/add-dependencies '[org.pinkgorilla/gg4clj "0.1.15"])
;; @@

;; @@ [clj]
; r plots are rendered as svg - just like this svg :-)
^:R [:svg [:rect {:width "100%", :height "100%", :style "stroke: none; fill: blue;"}]  ]
;; @@

;; @@ [clj]
(ns demo-mania
  (:require 
   [pinkgorilla.dsl.r.ggplot :as gg4clj]))
;; @@

;; @@ [clj]
(def xs (range 0 10 1))
(def ys (map #(Math/sin %) xs))
(def dat {:x xs :y ys})
;; @@

;; **
;;; Show how the data structure looks in r:
;; **

;; @@ [clj]
; see how the syntax is converted to R syntax.
(println (gg4clj/to-r 
  [[:<- :d (gg4clj/data-frame dat)]
   [:qplot :x :y {:data :d 
                  :geom [:c "point" "line"]}]]))
;; @@

;; @@ [clj]
; this needs r packages ggplot2
; dimensions in inch
(gg4clj/view
  [[:<- :d (gg4clj/data-frame dat)]
   [:qplot :x :y {:data :d 
                  :geom [:c "point" "line"]}]]
  {:width 6 })
;; @@

;; **
;;; Same line-plot as above, but saved to svg file
;; **

;; @@ [clj]
(gg4clj/view [:qplot :mpg 
              :hp {:data :mtcars 
                   :colour [:factor :carb] 
                   :facets (keyword "gear~cyl")}
              ] {:width 9})
;; @@

;; @@ [clj]
(gg4clj/view 
  (gg4clj/r+
    [:ggplot :diamonds [:aes :depth]]
    [:xlim 58 68]
    [:geom_histogram [:aes {:fill :cut}] {:binwidth 0.5 :position "fill"}]
    ;[:theme_bw]
    ){:width 8.5 :height 4})
;; @@

;; @@ [clj]
(gg4clj/view [:qplot :mpg {:data :mtcars}])
;; @@

;; @@ [clj]
(defn b-m
  []
  (let [a (rand)
        b (rand)
        r (Math/sqrt (* -2 (Math/log a)))
        th (* 2 Math/PI b)]
    (* r (Math/cos th))))


(def g-dat {:g1 (repeatedly 50 b-m) :g2 (repeatedly 50 b-m)})


(gg4clj/view [[:<- :g (gg4clj/data-frame g-dat)]
              (gg4clj/r+
                [:ggplot :g [:aes :g1 :g2]]
                [:xlim -2 2]
                [:ylim -2 2]
                [:stat_density2d {:colour "#FF29D2"}]
                [:geom_point {:colour "steelblue" :size 4}]
                ;[:theme_bw]
               )]
             {:width 7 :height 7})
;; @@

;; @@ [clj]

;; @@
