;; gorilla-repl.fileformat = 2

;; @@ [meta]
{:tags "ui,core.matrix,legacy,custom-renderer", :name "core.matrix visualization", :tagline "from jonny epsilon", :description ""}

;; @@

;; **
;;; # core.matrix visualization
;;; 
;;; This sample was adapted from LegacyGorilla to Pinkgorilla.
;;; 
;;; In Mathematica, matrices are represented by lists-of-lists, and on the whole, the notebook doesn't do anything special with them, displaying them like flat lists-of-lists. There'a a function, `MatrixForm` whose job is to tag the data for display in the front end as a matrix.
;; **

;; @@ [clj]
(pinkgorilla.notebook.repl/add-dependencies '[[net.mikera/core.matrix "0.62.0"]])
(use 'clojure.core.matrix)
;; @@
;; =>
;;; ["^ ","~:type","~:html","~:content",["~:span",["^ ","~:class","clj-nil"],"nil"],"~:value","nil"]
;; <=

;; **
;;; This type is just a marker for the front end, to know to render its contents as a matrix.
;; **

;; **
;;; A helper function, and an `extend-type` call (which at the minute are straight stolen from the table renderer, so you'll have to use your imagination on the formatting) tell Gorilla how to render things tagged as `MatrixView`. These rendering functions would work using protocol methods, meaning it would work for any implementation.
;; **

;; **
;;; And then, finally the user-facing function, which from their perspective, shows the given object as a matrix.
;; **

;; **
;;; ### User perspective
;;; 
;;; The user can define a matrix:
;; **

;; @@ [clj]
(def i (matrix [[1 2 5] [3 4 5] [1 2 1]]))
;; @@
;; =>
;;; ["^ ","~:type","~:html","~:content",["~:span",["^ ","~:class","clj-var"],"#'demo.matrix/i"],"~:value","#'demo.matrix/i"]
;; <=

;; **
;;; And if they look at it, it will be faithfully rendered according to the underlying implementation. This is kind of nice in a way, as you can really see what's going on.
;; **

;; @@ [clj]
i
;; @@
;; =>
;;; ["^ ","~:type","~:list-like","~:open",["~:span",["^ ","~:class","clj-vector"],"["],"~:close",["^3",["^ ","^4","clj-vector"],"]"],"~:separator",["^3"," "],"~:items",["~#list",[["^ ","^0","^1","^2",["^3",["^ ","^4","clj-vector"],"["],"^5",["^3",["^ ","^4","clj-vector"],"]"],"^6",["^3"," "],"^7",["^8",[["^ ","^0","~:html","~:content",["^3",["^ ","^4","clj-long"],"1"],"~:value","1"],["^ ","^0","^9","^:",["^3",["^ ","^4","clj-long"],"2"],"^;","2"],["^ ","^0","^9","^:",["^3",["^ ","^4","clj-long"],"5"],"^;","5"]]],"^;","[1 2 5]"],["^ ","^0","^1","^2",["^3",["^ ","^4","clj-vector"],"["],"^5",["^3",["^ ","^4","clj-vector"],"]"],"^6",["^3"," "],"^7",["^8",[["^ ","^0","^9","^:",["^3",["^ ","^4","clj-long"],"3"],"^;","3"],["^ ","^0","^9","^:",["^3",["^ ","^4","clj-long"],"4"],"^;","4"],["^ ","^0","^9","^:",["^3",["^ ","^4","clj-long"],"5"],"^;","5"]]],"^;","[3 4 5]"],["^ ","^0","^1","^2",["^3",["^ ","^4","clj-vector"],"["],"^5",["^3",["^ ","^4","clj-vector"],"]"],"^6",["^3"," "],"^7",["^8",[["^ ","^0","^9","^:",["^3",["^ ","^4","clj-long"],"1"],"^;","1"],["^ ","^0","^9","^:",["^3",["^ ","^4","clj-long"],"2"],"^;","2"],["^ ","^0","^9","^:",["^3",["^ ","^4","clj-long"],"1"],"^;","1"]]],"^;","[1 2 1]"]]],"^;","[[1 2 5] [3 4 5] [1 2 1]]"]
;; <=

;; **
;;; But, if you want to look at it as a matrix, then you can put it in to `matrix-view`.
;; **

;; @@ [clj]
^:R [:p/gtable i]
;; @@
;; =>
;;; ["^ ","~:type","~:reagent","~:content",["^ ","~:hiccup",["~:p/gtable",[[1,2,5],[3,4,5],[1,2,1]]],"~:map-keywords",true,"~:widget",true]]
;; <=

;; @@ [clj]

;; @@
