 {:modular (modular.system/modular-env)  ; {:profile "jetty"  :config ["demo.edn" "secrets.edn"]}
 :components
 {:config {:start (modular.config/load-config! (:config #ref [:modular]))}
  :secrets {:start (clojure.edn/read-string
                    (slurp #envf ["%s/goldly/trateg.edn" "MYVAULT"]))}

  :timbre {:start (modular.log/timbre-config!
                   (:timbre/clj (deref (clip/ref :config))))}

    ; load the :ns-clj defined by the user [demo.service]
    ;  :ns-require {:start (modular.require/require-namespaces
    ;                      (:ns-clj (deref (clip/ref :config))))}


  :symbol-lists {:start (ta.warehouse.symbollist/add-lists-to-db)}

  :alphavantage {:start (ta.data.api.alphavantage/set-key!
                         (:alphavantage (clip/ref :secrets)))}

  :quandl {:start (ta.data.api.quandl/set-key!
                   (:quandl (clip/ref :secrets)))}

  :kibot {:start (ta.data.api.kibot/set-key!
                  (:kibot (clip/ref :secrets)))}

; goldly service returns {:ns-clj :webly           ; this are used to start clj-require and webly
  ;                         :ws-watch :cljs-watch}   ; this is used when stopping goldly
  :goldly {:start (goldly.app.run/start-goldly
                   (deref (clip/ref :config))
                   (:profile #ref [:modular]))
           :stop (goldly.app.run/stop-goldly this)
           ;:post-start (goldly-docs/print-version)
           }

; load the :ns-clj defined by the user [demo.service]
  :ns-require {:start (modular.require/require-namespaces
                       (:ns-clj (deref (clip/ref :config))))}

  ; goldly extension clj-ns-loader is requiring already
  ;:ns-require {:start (modular.require/require-namespaces
                        ;(:ns-clj (clip/ref :goldly)))}

  :webly {:start (webly.app.app/start-webly
                  (:webly (clip/ref :goldly)) ; use webly config generated by goldly.
                  (:profile #ref [:modular]))
          :stop (webly.app.app/stop-webly this)}

  :nrepl {:start (nrepl.server/start-server
                  :bind "0.0.0.0"
                  :port 9100
                  :middleware cider.nrepl.middleware/cider-middleware
                  :handler cider.nrepl/cider-nrepl-handler)
          :stop (.close this)}

  :scheduler {:start (demo.env.scheduler/start!
                      (clip/ref :timbre))
              :stop (demo.env.scheduler/stop! this)}

  ;:juan  {:start (juan.scheduler/start!
  ;                (clip/ref :timbre)
  ;                (clip/ref :kibot) ; make sure kibot is configured first.
  ;                (clip/ref :ns-require) ; make sure kibot is configured first.
  ;                (clip/ref :goldly)
  ;                (clip/ref :symbol-lists))
  ;        :stop (juan.scheduler/stop! this)}
  
  :duckdb {:start (ta.warehouse.duckdb/duckdb-start "../../output/duckdb/bars")
           :stop (ta.warehouse.duckdb/duckdb-stop this)
           :post-start ta.warehouse.duckdb/init-tables}

  :feed-fx {:start    (ta.quote.fix/start-fix-feed-autoconnect :ctrader-tradeviewmarkets-quote)
                   ; not connected feed: 
                   ;(ta.quote.fix/create-quotefeed-fix :ctrader-tradeviewmarkets-quote)
           }

  :feed-bybit {:start  (ta.quote.bybit/start-quotefeed-bybit-autoconnect :something)
                   ; not connected feed: 
                   ;(ta.quote.fix/create-quotefeed-fix :ctrader-tradeviewmarkets-quote)
          }
  
  :live {:start (ta.env.live-bargenerator/create-live-environment
                 {:fx (clip/ref :feed-fx)
                  :crypto (clip/ref :feed-bybit)}
                 (clip/ref :duckdb))}
  
  ;; LIVE STRATEGIES
  :dummy-strategy {:start (ta.env.live-bargenerator/add (clip/ref :live) 
                           (var-get notebook.algo-config.raw-dummy/raw-dummy-strategies))}

  ;:sma-strategy-forex {:start (ta.env.dsl.barstrategy/add-bar-strategies (clip/ref :live)
  ;                             (var-get notebook.algo-config.simple-sma-crossover/algos-fx))}
  
  ;:sma-strategy-crypto {:start (ta.env.dsl.barstrategy/add-bar-strategies  (clip/ref :live)
  ;                               (var-get notebook.algo-config.simple-sma-rossover/algos-crypto))}

  ;:multicalendar-sma-strategy-forex {:start (ta.env.dsl.multi-calendar/add (clip/ref :live)
  ;                                           (var-get notebook.algo-config.multicalendar-sma/multi-calendar-algo-demo))}
  
  ;; LIVE STRATEGY MONITORING

  :label-monitor {:start (ta.env.tools.label-monitor/label-monitor-start (clip/ref :live))}

  ;; result printer is here mainly for debugging.
  :result-printer {:start (notebook.live.result-printer/start-print-results (clip/ref :live))}

  
  
  ;:bargenerator {:start (ta.tickerplant.bar-generator/bargenerator-start
  ;                       :us ; calendar
  ;                       :m ; minute bars
  ;                       ;ta.tickerplant.bar-generator/print-finished-bars
  ;                       (partial ta.warehouse.duckdb/append-bars (clip/ref :duckdb))
  ;                       )
  ;               :stop (ta.tickerplant.bar-generator/bargenerator-stop this)
  ;              } 

  ;:quote-harvester {:start (juan.fix/start-harvesting (clip/ref :bargenerator))}
  ;:quote-printer {:start (juan.fix/start-quote-printing (clip/ref :quote-harvester))}
  

;
  }}
