 {:modular (modular.system/modular-env)  ; {:profile "jetty"  :config ["demo.edn" "secrets.edn"]}
 :components
 {:config {:start (modular.config/load-config! (:config #ref [:modular]))}
  :secrets {:start (clojure.edn/read-string
                    (slurp #envf ["%s/trateg/creds.edn" "MYVAULT"]))}

  :timbre {:start (modular.log/timbre-config!
                   (:timbre/clj (deref (clip/ref :config))))}

    ; load the :ns-clj defined by the user [demo.service]
    ;  :ns-require {:start (modular.require/require-namespaces
    ;                      (:ns-clj (deref (clip/ref :config))))}

  :alphavantage {:start (ta.data.alphavantage/set-key!
                         (:alphavantage (clip/ref :secrets)))}
; goldly service returns {:ns-clj :webly           ; this are used to start clj-require and webly
  ;                         :ws-watch :cljs-watch}   ; this is used when stopping goldly
  :goldly {:start (goldly.app.run/start-goldly
                   (deref (clip/ref :config))
                   (:profile #ref [:modular]))
           :stop (goldly.app.run/stop-goldly this)
           ;:post-start (goldly-docs/print-version)
           }

; load the :ns-clj defined by the user [demo.service]
  :ns-require {:start (modular.require/require-namespaces
                       (:ns-clj (deref (clip/ref :config))))}

  ; goldly extension clj-ns-loader is requiring already
  ;:ns-require {:start (modular.require/require-namespaces
                        ;(:ns-clj (clip/ref :goldly)))}

  :webly {:start (webly.app.app/start-webly
                  (:webly (clip/ref :goldly)) ; use webly config generated by goldly.
                  (:profile #ref [:modular]))
          :stop (webly.app.app/stop-webly this)}

  :nrepl {:start (nrepl.server/start-server
                  :bind "0.0.0.0"
                  :port 9100
                  :middleware cider.nrepl.middleware/cider-middleware
                  :handler cider.nrepl/cider-nrepl-handler)
          :stop (.close this)}

  :clj-services {:start (goldly.service.expose/start-services
                         (:clj-services (deref (clip/ref :config))))
                 :stop (goldly.service.expose/stop-services this)}

;
  }}
