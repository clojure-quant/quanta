{:timbre/clj {:min-level  [[#{"org.eclipse.jetty.*"
                              "webly.*"
                              "webly.ws.*"} :info]
                           [#{"goldly.*"} :info]
                           [#{"ui.*"} :info]
                           [#{"user"} :warn] ; demos
                           [#{"*"} :info]]}

 :webly/web-server {:port 8080
                    :host "0.0.0.0"
                    :ssl-port 8443
                    :keystore "./certs/keystore.p12"
                    :key-password "password" ; Password you gave when creating the keystore
                    :jetty-ws {"/api/chsk" :ws/chsk-get}}

 :ns-clj [demo.goldly.reval ; for techml rendering (no need to require namespace)
          demo.env.algos]

 :goldly {:lazy true
          :src-dir "src"
          ; runtime
          :autoload-cljs-dir ["demo/goldly/page"
                              "demo/goldly/page/test"]
          :routes {:app {"" :user/main
                         "test/" {"test" :test/test
                                  "layout1" :test/layout1
                                  "layout2" :test/layout2
                                  }}
                   :api {"arrow" :dataset/arrow}}}

 :reval {:rdocument  {:storage-root "../../output/rdocument/"
                      :url-root "/api/rdocument/file/"}
         :collections {:data [:clj "notebook/data/"]
                       :studies [:clj "notebook/studies/"]
                       :datascience [:clj "notebook/datascience/"]
                       :playground [:clj "notebook/playground/"]
                       :ui-test [:cljs "demo/goldly/ui_test/"]
                       ;:demo [:clj "demo/notebook/"]
                       ;:demo-cljs [:cljs "demo/notebook/"]
                       }}

 :ta {:warehouse {:list "../resources/symbollist/"
                  :series  {:crypto "../../output/db/crypto/"
                            :stocks "../../output/db/stocks/"
                            :fx "../../output/db/fx/"
                            :futures "../../output/db/futures/"
                            :random "../../output/db/random/"
                            :shuffled  "../../output/db/shuffled/"}
                  :lists ["crypto"
                          "fidelity-select"
                          "bonds"
                          "commodity-industry"
                          "commodity-sector"
                          "currency-spot"
                          "equity-region"
                          "equity-region-country"
                          "equity-sector-industry"
                          "equity-style"
                          "test"
                          "futures-kibot"
                          ]}
      :tradingview {:charts-path   "../../output/tradingview-charts/"
                    :template-path "../resources/tradingview-templates/"
                    :marks-path "../../data/"}}


 :demo {:gann-data-file "../resources/gann.edn"}

 :keybindings [{:kb "alt-g k",
                :handler [:palette/show],
                :desc "Keybindings dialog"}
               {:kb "esc",
                :handler [:modal/close],
                :desc "Dialog Close"}
               {:kb "alt-g t",
                :handler [:reframe10x-toggle],
                :desc "10x visibility toggle"}
 
                ;{:kb "up"   :handler [:arrow-up]    :desc "Codemirror Key Up"} ; :scope :codemirror
                ;{:kb "down" :handler [:arrow-down] :desc "Codemirror Key Down"} :scope :codemirror
               {:kb "shift-enter" :handler [:codemirror-active/completion-apply]  :desc "applies auto completion"}
               {:kb "ctrl-space"  :handler [:codemirror/completion-get]     :desc "Show possible auto-completions"}
                ; {:spec "enter"    :handler [:completion/clear]          :key ::clear}
                ; {:spec "ctrl"     :handler [:completion/show-all false] :scope :global :key ::show-all-hide}
               {:kb "alt-g c"     :handler [:clojuredocs]               :desc "Look up the symbol under the cursor in ClojureDocs"}
 
                ; eval
               {:kb "alt-shift-enter"     :handler [:notebook/evaluate-all] :desc "Evaluate all segments."}
               {:kb "ctrl-shift-enter" :handler [:notebook/evaluate-all]         :desc "Evaluate all segments"}
               {:kb "ctrl-enter" :handler [:repl/eval-expression]               :desc "Evaluate the highlighted segment"}]
 
 :scratchpad {:tap true}


;
 }
